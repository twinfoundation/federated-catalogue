{
	"openapi": "3.1.0",
	"info": {
		"title": "TWIN - Test Endpoints",
		"description": "REST API for TWIN - Test Endpoints.",
		"version": "1.0.0",
		"license": {
			"name": "Apache 2.0 License",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://localhost"
		}
	],
	"tags": [
		{
			"name": "Federated Catalogue",
			"description": "Endpoints to access a Federated Catalogue."
		}
	],
	"paths": {
		"/federated-catalogue/participant-credentials": {
			"post": {
				"operationId": "compliancePresentationRequest",
				"summary": "Present a Compliance Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"compliancePresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offering-credentials": {
			"post": {
				"operationId": "serviceOfferingPresentationRequest",
				"summary": "Present a Service Offering Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"serviceOfferingPresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resource-credentials": {
			"post": {
				"operationId": "dataResourcePresentationRequest",
				"summary": "Present a Data Resource Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"dataResourcePresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connector-credentials": {
			"post": {
				"operationId": "dataSpaceConnectorPresentationRequest",
				"summary": "Present a Data Space Connector Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"dataSpaceConnectorPresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/participants": {
			"get": {
				"operationId": "federatedCatalogueListParticipants",
				"summary": "Get a list of the participant entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The participant Id.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "registrationNumber",
						"description": "The legal registration number.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "abc"
					},
					{
						"name": "lrnType",
						"description": "The legal registration number type.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for participant list query",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ParticipantList"
								},
								"examples": {
									"participantListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "did:iota:xxx",
													"type": "LegalPerson",
													"registrationNumber": {
														"type": "LocalRegistrationNumber",
														"local": "P1234567"
													},
													"legalName": "A Inc.",
													"issuer": "did:iota:zzz",
													"legalAddress": {
														"type": "Address",
														"countryCode": "KE"
													},
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/participants/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetParticipant",
				"summary": "Get a participant",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the entry (Participant, Service, etc.) to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:123456"
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for a Participant Entry.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ParticipantEntry"
								},
								"examples": {
									"participantGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "did:iota:xxx",
											"type": "LegalPerson",
											"registrationNumber": {
												"type": "LocalRegistrationNumber",
												"local": "P1234567"
											},
											"legalName": "A Inc.",
											"issuer": "did:iota:zzz",
											"legalAddress": {
												"type": "Address",
												"countryCode": "KE"
											},
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offerings": {
			"get": {
				"operationId": "federatedCatalogueListServices",
				"summary": "Get a list of the service entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The Service Offering Id.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "providedBy",
						"description": "The service provider.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for Service Offering list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceOfferingList"
								},
								"examples": {
									"serviceOfferingListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "http://example.org/is123456",
													"name": "Service 1",
													"type": "ServiceOffering",
													"servicePolicy": [
														{
															"@context": [
																"https://www.w3.org/ns/odrl/2/",
																{
																	"twin": "https://schema.twindev.org/w3c-odrl/",
																	"jsonPathSelector": "twin:jsonPathSelector"
																}
															],
															"@type": "Agreement",
															"uid": "http://example.com/policy:1010",
															"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
															"assignee": "did:iota:testnet:0x119adb64d01d3b0fa0d308c67db90ab1c6e0df6aebe5b7e0250783f57cd10c21",
															"permission": [
																{
																	"target": {
																		"type": "https://vocabulary.uncefact.org/Document",
																		"refinement": {
																			"leftOperand": {
																				"@id": "https://w3id.org/twin/odrl/propertyValue",
																				"jsonPathSelector": ".documentTypeCode"
																			},
																			"operator": "eq",
																			"rightOperand": "https://vocabulary.uncefact.org/DocumentCodeList#331"
																		}
																	},
																	"action": "extract"
																}
															]
														}
													],
													"endpoint": {
														"type": "Endpoint",
														"endpointURL": "https://endpoint.example.org/api"
													},
													"issuer": "did:iota:7890",
													"providedBy": "did:iota:1234567",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offerings/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetService",
				"summary": "Get a Service Offering entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://my-services.example.org/service1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServiceOfferingEntry"
								},
								"examples": {
									"serviceOfferingGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "http://example.org/is123456",
											"name": "Service 1",
											"type": "ServiceOffering",
											"servicePolicy": [
												{
													"@context": [
														"https://www.w3.org/ns/odrl/2/",
														{
															"twin": "https://schema.twindev.org/w3c-odrl/",
															"jsonPathSelector": "twin:jsonPathSelector"
														}
													],
													"@type": "Agreement",
													"uid": "http://example.com/policy:1010",
													"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
													"assignee": "did:iota:testnet:0x119adb64d01d3b0fa0d308c67db90ab1c6e0df6aebe5b7e0250783f57cd10c21",
													"permission": [
														{
															"target": {
																"type": "https://vocabulary.uncefact.org/Document",
																"refinement": {
																	"leftOperand": {
																		"@id": "https://w3id.org/twin/odrl/propertyValue",
																		"jsonPathSelector": ".documentTypeCode"
																	},
																	"operator": "eq",
																	"rightOperand": "https://vocabulary.uncefact.org/DocumentCodeList#331"
																}
															},
															"action": "extract"
														}
													]
												}
											],
											"endpoint": {
												"type": "Endpoint",
												"endpointURL": "https://endpoint.example.org/api"
											},
											"issuer": "did:iota:7890",
											"providedBy": "did:iota:1234567",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resources": {
			"get": {
				"operationId": "federatedCatalogueListResources",
				"summary": "Get a list of the data resource entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The Id of the Data Resource.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "producedBy",
						"description": "The service provider.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response fo data resource list.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataResourceList"
								},
								"examples": {
									"dataResourceListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "http://example.org/is123456",
													"name": "Data Resource 1",
													"type": "DataResource",
													"copyrightOwnedBy": "did:iota:1234",
													"license": "http://licenses.example.org/12345",
													"resourcePolicy": [
														{
															"@context": "https://www.w3.org/ns/odrl/2/",
															"@type": "Offer",
															"uid": "http://example.com/policy:1010",
															"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
															"permission": [
																{
																	"target": {
																		"type": "https://vocabulary.uncefact.org/Document"
																	},
																	"action": "extract"
																}
															]
														}
													],
													"exposedThrough": "https://ds-connectors.example.org/ds1",
													"producedBy": "did:iota:1234567",
													"issuer": "did:iota:987654",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resources/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetDataResource",
				"summary": "Get a Data Resource entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://data-resources.example.org/drs1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataResourceEntry"
								},
								"examples": {
									"dataResourceGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "http://example.org/is123456",
											"name": "Data Resource 1",
											"type": "DataResource",
											"copyrightOwnedBy": "did:iota:1234",
											"license": "http://licenses.example.org/12345",
											"resourcePolicy": [
												{
													"@context": "https://www.w3.org/ns/odrl/2/",
													"@type": "Offer",
													"uid": "http://example.com/policy:1010",
													"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
													"permission": [
														{
															"target": {
																"type": "https://vocabulary.uncefact.org/Document"
															},
															"action": "extract"
														}
													]
												}
											],
											"exposedThrough": "https://ds-connectors.example.org/ds1",
											"producedBy": "did:iota:1234567",
											"issuer": "did:iota:987654",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connectors": {
			"get": {
				"operationId": "federatedCatalogueListDataSpaceConnectors",
				"summary": "Get a list of the Data Space connectors entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the Data Space Connector.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "maintainedBy",
						"description": "The maintainer",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for Data Space Connector list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSpaceConnectorList"
								},
								"examples": {
									"dataSpaceConnectorListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "https://my-ds-connectors.example.org/ds-connector-ABCD",
													"type": [
														"DataExchangeComponent",
														"DataSpaceConnector"
													],
													"identity": "did:iota:testnet:123456",
													"defaultEndpoint": {
														"type": "Endpoint",
														"endpointURL": "https://my-twin-node.example.org:9000/twin-ds-connector"
													},
													"subscriptionActivityEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/subscriptions"
													},
													"pushActivityEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/notify"
													},
													"pullDataEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/data"
													},
													"maintainer": "did:iota:99999",
													"offeredResource": [
														"https://my-data-resource.example.org"
													],
													"issuer": "did:iota:987654",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connectors/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetDataSpaceConnector",
				"summary": "Get a Data Space Connector entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://ds-connectors.example.org/ds1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataSpaceConnectorEntry"
								},
								"examples": {
									"dataSpaceConnectorGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "https://my-ds-connectors.example.org/ds-connector-ABCD",
											"type": [
												"DataExchangeComponent",
												"DataSpaceConnector"
											],
											"identity": "did:iota:testnet:123456",
											"defaultEndpoint": {
												"type": "Endpoint",
												"endpointURL": "https://my-twin-node.example.org:9000/twin-ds-connector"
											},
											"subscriptionActivityEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/subscriptions"
											},
											"pushActivityEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/notify"
											},
											"pullDataEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/data"
											},
											"maintainer": "did:iota:99999",
											"offeredResource": [
												"https://my-data-resource.example.org"
											],
											"issuer": "did:iota:987654",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"CompliancePresentationRequest": {
				"type": "string",
				"description": "The data to be used in the create."
			},
			"DataResourceEntry": {
				"type": "object",
				"properties": {
					"producedBy": {
						"type": "string",
						"description": "Overwriting producedBy as we only store the identifier"
					},
					"copyrightOwnedBy": {
						"type": "string",
						"description": "Overwriting copyrightOwnedBy as we only store the identifier"
					},
					"exposedThrough": {
						"type": "string",
						"description": "Overwriting exposedThrough as we only store the id of the Data Exchange Component"
					},
					"resourcePolicy": {
						"type": "array",
						"items": false,
						"description": "Overwriting to ensure always an array is stored",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlPolicy"
							}
						]
					},
					"issuer": {
						"type": "string",
						"description": "The trusted issuer of the compliance credential"
					},
					"validFrom": {
						"type": "string",
						"description": "Valid from (as per W3C VC Data Model v2)"
					},
					"validUntil": {
						"type": "string",
						"description": "Valid until (as per W3C VC Data Model v2)"
					},
					"dateCreated": {
						"type": "string",
						"description": "The creation date."
					},
					"evidence": {
						"type": "array",
						"items": false,
						"description": "The evidences concerning the data resource.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"id": {
						"type": "string",
						"description": "Subject Id"
					},
					"type": {
						"type": "string",
						"const": "DataResource",
						"description": "Subject type"
					},
					"name": {
						"type": "string",
						"description": "The Resource Name"
					},
					"license": {
						"type": "string",
						"description": "Pointer (URL) to the license"
					},
					"description": {
						"type": "string",
						"description": "Description of the Gaia-X entity."
					},
					"@id": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@included": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@reverse": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@index": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					}
				},
				"required": [
					"producedBy",
					"copyrightOwnedBy",
					"exposedThrough",
					"resourcePolicy",
					"issuer",
					"validFrom",
					"validUntil",
					"dateCreated",
					"evidence",
					"id",
					"type",
					"name",
					"license",
					"@id",
					"@included",
					"@graph",
					"@nest",
					"@type",
					"@reverse",
					"@index"
				],
				"additionalProperties": false
			},
			"DataResourceList": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/FederatedCatalogueContextType"
					},
					"type": {
						"type": "string",
						"const": "ItemList",
						"description": "The type"
					},
					"itemListElement": {
						"type": "array",
						"items": false,
						"description": "The components of the Collection",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/DataResourceEntry"
							}
						]
					},
					"nextItem": {
						"type": "string",
						"description": "Next item cursor."
					}
				},
				"required": [
					"@context",
					"type",
					"itemListElement"
				],
				"additionalProperties": false,
				"description": "Interface describing a list of Data Resource entries."
			},
			"DataSpaceConnectorEntry": {
				"type": "object",
				"properties": {
					"offeredResource": {
						"type": "array",
						"items": false,
						"description": "Offered resources. Probably in the future this wll be separated in a different entry so that a  Data Space Connector entry does not need to be modified when a new Data Resource is offered.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"id": {
						"type": "string",
						"description": "A unique identifier given to this Data Space Connector."
					},
					"type": {
						"type": "array",
						"minItems": 2,
						"items": {
							"type": "string"
						},
						"description": "A Connector is a Data Exchange Component",
						"prefixItems": [
							{
								"type": "string",
								"const": "DataExchangeComponent"
							},
							{
								"type": "string",
								"const": "DataSpaceConnector"
							}
						]
					},
					"identity": {
						"type": "string",
						"description": "Connector's Identity that allows to know public key of this Connector."
					},
					"maintainer": {
						"type": "string",
						"description": "Who maintains this Data Space Connector."
					},
					"name": {
						"type": "string",
						"description": "The name of this Data Space Connector"
					},
					"description": {
						"type": "string",
						"description": "A description of this Data Space Connector"
					},
					"defaultEndpoint": {
						"$ref": "https://schema.twindev.org/gaia-x/Endpoint"
					},
					"subscriptionActivityEndpoint": {
						"$ref": "https://schema.twindev.org/gaia-x/Endpoint"
					},
					"pushActivityEndpoint": {
						"$ref": "https://schema.twindev.org/gaia-x/Endpoint"
					},
					"pullDataEndpoint": {
						"$ref": "https://schema.twindev.org/gaia-x/Endpoint"
					},
					"@id": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@included": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@reverse": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@index": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"issuer": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"validFrom": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"validUntil": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"dateCreated": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"evidence": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					}
				},
				"required": [
					"offeredResource",
					"id",
					"type",
					"identity",
					"maintainer",
					"defaultEndpoint",
					"pushActivityEndpoint",
					"pullDataEndpoint",
					"@id",
					"@included",
					"@graph",
					"@nest",
					"@type",
					"@reverse",
					"@index",
					"issuer",
					"validFrom",
					"validUntil",
					"dateCreated",
					"evidence"
				],
				"additionalProperties": false
			},
			"DataSpaceConnectorList": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/FederatedCatalogueContextType"
					},
					"type": {
						"type": "string",
						"const": "ItemList",
						"description": "The type"
					},
					"itemListElement": {
						"type": "array",
						"items": false,
						"description": "The components of the Collection",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/DataSpaceConnectorEntry"
							}
						]
					},
					"nextItem": {
						"type": "string",
						"description": "Next item cursor."
					}
				},
				"required": [
					"@context",
					"type",
					"itemListElement"
				],
				"additionalProperties": false,
				"description": "Interface describing a list of Data Space Connectors."
			},
			"Error": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"name",
					"message"
				],
				"additionalProperties": false,
				"description": "Model to describe serialized error."
			},
			"FederatedCatalogueContextType": {
				"type": "array",
				"minItems": 3,
				"items": false,
				"maxItems": 3,
				"description": "Type that defines the LD Context for the Federated Catalogue entities and entries.",
				"prefixItems": [
					{
						"type": "string",
						"const": "https://schema.org"
					},
					{
						"type": "string",
						"const": "https://w3id.org/gaia-x/development"
					},
					{
						"type": "string",
						"const": "https://schema.twindev.org/federated-catalogue/"
					}
				]
			},
			"ParticipantEntry": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string",
						"const": "LegalPerson",
						"description": "JSON-LD type."
					},
					"registrationNumber": {
						"$ref": "https://schema.twindev.org/gaia-x/RegistrationNumber"
					},
					"legalName": {
						"type": "string",
						"description": "The legal name."
					},
					"legalAddress": {
						"$ref": "https://schema.twindev.org/gaia-x/Address"
					},
					"headquartersAddress": {
						"$ref": "https://schema.twindev.org/gaia-x/Address"
					},
					"parentOrganizationOf": {
						"type": "array",
						"items": false,
						"description": "Parent organization.",
						"prefixItems": [
							{
								"type": "object",
								"additionalProperties": {
									"anyOf": [
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
										},
										{
											"type": "array"
										}
									]
								},
								"properties": {
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string",
										"const": "LegalPerson"
									},
									"@context": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdContextDefinitionRoot"
									},
									"@id": {
										"anyOf": [
											{
												"type": "string"
											},
											{
												"type": "array",
												"items": {
													"type": "string"
												}
											}
										]
									},
									"@included": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
									},
									"@graph": {
										"anyOf": [
											{
												"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
											},
											{
												"type": "array",
												"items": {
													"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
												}
											}
										]
									},
									"@nest": {
										"anyOf": [
											{
												"$ref": "https://schema.twindev.org/json-ld/JsonLdJsonObject"
											},
											{
												"type": "array",
												"items": {
													"$ref": "https://schema.twindev.org/json-ld/JsonLdJsonObject"
												}
											}
										]
									},
									"@type": {
										"anyOf": [
											{
												"type": "string"
											},
											{
												"type": "array",
												"items": {
													"type": "string"
												}
											}
										]
									},
									"@reverse": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										}
									},
									"@index": {
										"type": "string"
									}
								},
								"required": [
									"id",
									"type"
								]
							}
						]
					},
					"subOrganizationOf": {
						"type": "array",
						"items": false,
						"description": "Sub organization of.",
						"prefixItems": [
							{
								"type": "object",
								"additionalProperties": {
									"anyOf": [
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
										},
										{
											"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
										},
										{
											"type": "array"
										}
									]
								},
								"properties": {
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string",
										"const": "LegalPerson"
									},
									"@context": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdContextDefinitionRoot"
									},
									"@id": {
										"anyOf": [
											{
												"type": "string"
											},
											{
												"type": "array",
												"items": {
													"type": "string"
												}
											}
										]
									},
									"@included": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
									},
									"@graph": {
										"anyOf": [
											{
												"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
											},
											{
												"type": "array",
												"items": {
													"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
												}
											}
										]
									},
									"@nest": {
										"anyOf": [
											{
												"$ref": "https://schema.twindev.org/json-ld/JsonLdJsonObject"
											},
											{
												"type": "array",
												"items": {
													"$ref": "https://schema.twindev.org/json-ld/JsonLdJsonObject"
												}
											}
										]
									},
									"@type": {
										"anyOf": [
											{
												"type": "string"
											},
											{
												"type": "array",
												"items": {
													"type": "string"
												}
											}
										]
									},
									"@reverse": {
										"type": "object",
										"additionalProperties": {
											"type": "string"
										}
									},
									"@index": {
										"type": "string"
									}
								},
								"required": [
									"id",
									"type"
								]
							}
						]
					},
					"id": {
						"type": "string",
						"description": "The Id."
					},
					"name": {
						"type": "string",
						"description": "Human readable Name."
					},
					"description": {
						"type": "string",
						"description": "Description of the Gaia-X entity."
					},
					"@id": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@included": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@reverse": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@index": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"issuer": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"validFrom": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"validUntil": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"dateCreated": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"evidence": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					}
				},
				"required": [
					"type",
					"registrationNumber",
					"legalName",
					"legalAddress",
					"id",
					"@id",
					"@included",
					"@graph",
					"@nest",
					"@type",
					"@reverse",
					"@index",
					"issuer",
					"validFrom",
					"validUntil",
					"dateCreated",
					"evidence"
				],
				"additionalProperties": false
			},
			"ParticipantList": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/FederatedCatalogueContextType"
					},
					"type": {
						"type": "string",
						"const": "ItemList",
						"description": "The type"
					},
					"itemListElement": {
						"type": "array",
						"items": false,
						"description": "The components of the Collection",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/ParticipantEntry"
							}
						]
					},
					"nextItem": {
						"type": "string",
						"description": "Next item cursor."
					}
				},
				"required": [
					"@context",
					"type",
					"itemListElement"
				],
				"additionalProperties": false,
				"description": "Interface describing a participant entry list."
			},
			"ServiceOfferingEntry": {
				"type": "object",
				"properties": {
					"providedBy": {
						"type": "string",
						"description": "Overwrites providedBy as we only store identifier as string"
					},
					"aggregationOfResources": {
						"type": "array",
						"items": false,
						"description": "Overwrites aggregationOfResources as we only store identifier as string",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"servicePolicy": {
						"type": "array",
						"items": false,
						"description": "The service policy is always stored as an array",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/w3c-odrl/OdrlPolicy"
							}
						]
					},
					"issuer": {
						"type": "string",
						"description": "The trusted issuer of the compliance credential"
					},
					"validFrom": {
						"type": "string",
						"description": "Valid from (as per W3C VC Data Model v2)"
					},
					"validUntil": {
						"type": "string",
						"description": "Valid until (as per W3C VC Data Model v2)"
					},
					"dateCreated": {
						"type": "string",
						"description": "The creation date."
					},
					"evidence": {
						"type": "array",
						"items": false,
						"description": "The evidences concerning the data resource.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"type": {
						"type": "string",
						"const": "ServiceOffering",
						"description": "Type"
					},
					"name": {
						"type": "string",
						"description": "Name of the Service Offering."
					},
					"endpoint": {
						"$ref": "https://schema.twindev.org/gaia-x/Endpoint"
					},
					"id": {
						"type": "string",
						"description": "The Id."
					},
					"description": {
						"type": "string",
						"description": "Description of the Gaia-X entity."
					},
					"@id": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@included": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@reverse": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					},
					"@index": {
						"anyOf": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodePrimitive"
									}
								]
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdLanguageMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIndexMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIncludedBlock"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdIdMap"
							},
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdTypeMap"
							}
						]
					}
				},
				"required": [
					"providedBy",
					"servicePolicy",
					"issuer",
					"validFrom",
					"validUntil",
					"dateCreated",
					"evidence",
					"type",
					"name",
					"endpoint",
					"id",
					"@id",
					"@included",
					"@graph",
					"@nest",
					"@type",
					"@reverse",
					"@index"
				],
				"additionalProperties": false
			},
			"ServiceOfferingList": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/FederatedCatalogueContextType"
					},
					"type": {
						"type": "string",
						"const": "ItemList",
						"description": "The type"
					},
					"itemListElement": {
						"type": "array",
						"items": false,
						"description": "The components of the Collection",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/ServiceOfferingEntry"
							}
						]
					},
					"nextItem": {
						"type": "string",
						"description": "Next item cursor."
					}
				},
				"required": [
					"@context",
					"type",
					"itemListElement"
				],
				"additionalProperties": false,
				"description": "Interface describing a list of Service Offering Entries."
			},
			"UriActionType": {
				"anyOf": [
					{
						"type": "string",
						"const": "odrl:use",
						"description": "To use the Asset - actions that involve general usage by parties."
					},
					{
						"type": "string",
						"const": "odrl:transfer",
						"description": "To transfer the ownership to third parties."
					},
					{
						"type": "string",
						"const": "odrl:acceptTracking",
						"description": "To accept that the use of the Asset may be tracked."
					},
					{
						"type": "string",
						"const": "odrl:aggregate",
						"description": "To use the Asset or parts of it as part of a composite collection."
					},
					{
						"type": "string",
						"const": "odrl:annotate",
						"description": "To add explanatory notations/commentaries to the Asset without modifying the Asset in any other way."
					},
					{
						"type": "string",
						"const": "odrl:anonymize",
						"description": "To anonymize all or parts of the Asset."
					},
					{
						"type": "string",
						"const": "odrl:archive",
						"description": "To store the Asset (in a non-transient form)."
					},
					{
						"type": "string",
						"const": "odrl:attribute",
						"description": "To attribute the use of the Asset."
					},
					{
						"type": "string",
						"const": "odrl:attribution",
						"description": "Credit be given to copyright holder and/or author."
					},
					{
						"type": "string",
						"const": "odrl:commercialUse",
						"description": "Exercising rights for commercial purposes."
					},
					{
						"type": "string",
						"const": "odrl:compensate",
						"description": "To compensate by transfer of some amount of value for using or selling the Asset."
					},
					{
						"type": "string",
						"const": "odrl:concurrentUse",
						"description": "To create multiple copies of the Asset that are being concurrently used."
					},
					{
						"type": "string",
						"const": "odrl:delete",
						"description": "To permanently remove all copies of the Asset after it has been used."
					},
					{
						"type": "string",
						"const": "odrl:derive",
						"description": "To create a new derivative Asset from this Asset and to edit or modify the derivative."
					},
					{
						"type": "string",
						"const": "odrl:derivativeWorks",
						"description": "Distribution of derivative works."
					},
					{
						"type": "string",
						"const": "odrl:digitize",
						"description": "To produce a digital copy of (or otherwise digitize) the Asset from its analogue form."
					},
					{
						"type": "string",
						"const": "odrl:display",
						"description": "To create a static and transient rendition of an Asset."
					},
					{
						"type": "string",
						"const": "odrl:distribute",
						"description": "To supply the Asset to third-parties."
					},
					{
						"type": "string",
						"const": "odrl:distribution",
						"description": "Distribution, public display, and publicly performance."
					},
					{
						"type": "string",
						"const": "odrl:ensureExclusivity",
						"description": "To ensure that the Rule on the Asset is exclusive."
					},
					{
						"type": "string",
						"const": "odrl:execute",
						"description": "To run the computer program Asset."
					},
					{
						"type": "string",
						"const": "odrl:extract",
						"description": "To extract parts of the Asset and to use it as a new Asset."
					},
					{
						"type": "string",
						"const": "odrl:give",
						"description": "To transfer the ownership without compensation and while deleting the original asset."
					},
					{
						"type": "string",
						"const": "odrl:grantUse",
						"description": "To grant the use of the Asset to third parties."
					},
					{
						"type": "string",
						"const": "odrl:include",
						"description": "To include other related assets in the Asset."
					},
					{
						"type": "string",
						"const": "odrl:index",
						"description": "To record the Asset in an index."
					},
					{
						"type": "string",
						"const": "odrl:inform",
						"description": "To inform that an action has been performed on or in relation to the Asset."
					},
					{
						"type": "string",
						"const": "odrl:install",
						"description": "To load the computer program Asset onto a storage device."
					},
					{
						"type": "string",
						"const": "odrl:modify",
						"description": "To change existing content of the Asset without creating a new asset."
					},
					{
						"type": "string",
						"const": "odrl:move",
						"description": "To move the Asset from one digital location to another including deleting the original copy."
					},
					{
						"type": "string",
						"const": "odrl:nextPolicy",
						"description": "To grant the specified Policy to a third party for their use of the Asset."
					},
					{
						"type": "string",
						"const": "odrl:notice",
						"description": "Copyright and license notices be kept intact."
					},
					{
						"type": "string",
						"const": "odrl:obtainConsent",
						"description": "To obtain verifiable consent to perform the requested action."
					},
					{
						"type": "string",
						"const": "odrl:play",
						"description": "To create a sequential and transient rendition of an Asset."
					},
					{
						"type": "string",
						"const": "odrl:present",
						"description": "To publicly perform the Asset."
					},
					{
						"type": "string",
						"const": "odrl:print",
						"description": "To create a tangible and permanent rendition of an Asset."
					},
					{
						"type": "string",
						"const": "odrl:read",
						"description": "To obtain data from the Asset."
					},
					{
						"type": "string",
						"const": "odrl:reproduce",
						"description": "To make duplicate copies of the Asset in any material form."
					},
					{
						"type": "string",
						"const": "odrl:reproduction",
						"description": "Making multiple copies."
					},
					{
						"type": "string",
						"const": "odrl:reviewPolicy",
						"description": "To review the Policy applicable to the Asset."
					},
					{
						"type": "string",
						"const": "odrl:sell",
						"description": "To transfer the ownership with compensation and while deleting the original asset."
					},
					{
						"type": "string",
						"const": "odrl:shareAlike",
						"description": "Derivative works be licensed under the same terms or compatible terms."
					},
					{
						"type": "string",
						"const": "odrl:sharing",
						"description": "Permits commercial derivatives, but only non-commercial distribution."
					},
					{
						"type": "string",
						"const": "odrl:sourceCode",
						"description": "Source code must be provided when exercising some rights."
					},
					{
						"type": "string",
						"const": "odrl:stream",
						"description": "To deliver the Asset in real-time."
					},
					{
						"type": "string",
						"const": "odrl:synchronize",
						"description": "To use the Asset in timed relations with media elements of another Asset."
					},
					{
						"type": "string",
						"const": "odrl:textToSpeech",
						"description": "To have a text Asset read out loud."
					},
					{
						"type": "string",
						"const": "odrl:transform",
						"description": "To convert the Asset into a different format."
					},
					{
						"type": "string",
						"const": "odrl:translate",
						"description": "To translate the Asset into another natural language."
					},
					{
						"type": "string",
						"const": "odrl:uninstall",
						"description": "To unload and delete the computer program Asset."
					},
					{
						"type": "string",
						"const": "odrl:watermark",
						"description": "To apply a watermark to the Asset."
					}
				],
				"description": "The types for ODRL Actions. URI action types (for use with rdf:value/@id)   The types for ODRL Actions. Simple action types (for direct string usage)"
			},
			"bjectOrArray_IJsonLdNodeObject_": {
				"anyOf": [
					{
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					{
						"type": "array",
						"items": false,
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
							}
						]
					}
				],
				"description": "Object or array data type"
			}
		},
		"securitySchemes": {
			"jwtBearerAuthScheme": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
